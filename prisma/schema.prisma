// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3306/bbs"
}

// Just used login 
// Separate hotspots
model Account {
  // Account id
  id         Int       @id @default(autoincrement())
  // Email login use
  email      String    @unique
  // Password login use
  password   String
  // bcrypt used
  salt       String
  // Ban flag
  ban        Boolean   @default(false)
  // Ban reason
  reason     String?
  // Expire
  ban_expire String?

  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  // Account Profile
  profile Profile?
  threadReply  ThreadReply[]
  ReplyComment  ReplyComment[]
}

// Store permission name,description and relation
model Permission {
  // Permission id
  id   Int    @id @default(autoincrement())
  // Permission name
  name String
  // Permission Description
  desc String
  // Who has this permission
  role Role[]

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

// Permission set
model Role {
  // Role id
  id         Int          @id @default(autoincrement())
  // Role name
  name       String
  // Role description
  desc       String
  // Who has this role
  profile    Profile[]
  // What perrmisions for this role
  permission Permission[]

  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

// Profile in bbs, Other user only can get profile (if not have sufficient permissions)
model Profile {
  // Profile id
  id         Int     @id @default(autoincrement())
  // Profile name
  name       String
  // Bio
  bio        String
  account_id Int     @unique
  // what account has this profile
  account    Account @relation(fields: [account_id], references: [id])

  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  post   Post[]
  thread Thread[]
  role   Role[]
  area   Area[]
}

// Post set, can have many subarea.
// If parent is null, this area is root
// We can have many root area
model Area {
  id Int @id @default(autoincrement())

  name       String
  manager_id Int
  manager    Profile @relation(fields: [manager_id], references: [id])
  parent     Int?

  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  post Post[]
}

// Articles published by users in designated areas
// It must have aid, Becuase post must within Area
model Post {
  // Auto genrate in database.
  id Int @id @default(autoincrement())

  // title of post
  title String

  // Summary that other users can see without clicking on it
  // TODO: keep empty now
  content String

  author_id Int    
  author    Profile @relation(fields: [author_id], references: [id])

  // if hidden is true, only manager, site admin and have users with corresponding permissions can visit
  hidden        Boolean?
  // if hidden is true, Users without corresponding permissions only see "hidden reason"
  hidden_reason Boolean?

  // Area id
  aid  Int
  area Area @relation(fields: [aid], references: [id])

  // How many "Thread"
  floors Int     @default(1)
  pin    Boolean

  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  threads Thread[]

  @@index([update_at])
}

// A user click post
// Sent a new post within the post
// The "new post" is thread
model Thread {
  // Thread id
  id Int @id @default(autoincrement())

  content String

  // In which post should this post be displayed
  parent Int

  author_id Int
  author    Profile @relation(fields: [author_id], references: [id])

  create_at DateTime @default(now())
  update_at DateTime @updatedAt

  post Post @relation(fields: [parent], references: [id])

  floor BigInt @default(1)

  hidden  Boolean @default(false)
  reason  String @default("")
}

// eg.
// Jack click a title called "Dev" post
// Bob send a new post within "Dev" post content is "PHP IS NO.1!!!!!!!!"
// Alice send a new comment "NOPE, TYPESCRIPT IS NO.1"
// The message sent by Alice is called a reply
// Reply can have children reply. That is, the reply to the reply.
model ThreadReply {
  id   Int  @id @default(autoincrement())
  // Thread Id
  parent  Int
  floor BigInt
  content String
  author  Account @relation(fields: [author_id], references: [id])
  author_id Int
  hot BigInt  @default(1)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
}

model ReplyComment {
  id   Int  @id @default(autoincrement())
  // Reply/Comment Id
  parent  Int
  content String
  author  Account @relation(fields: [author_id], references: [id])
  author_id Int
  hot BigInt  @default(1)
  create_at DateTime @default(now())
  update_at DateTime @updatedAt  
}
